// https://github.com/enzosaracen/ptpatch
// 127fc889ae8cae858eeeb27cd320c9e32a941c8e

int parent;

struct locked {
	int pid;
	struct locked *next;
	char buf[0x100];
} jail;

%%

<@ pre-syscall 690
	struct locked *p = &jail;
	while (p->next)
		p = p->next;
	p->pid = pid;
	p->next = calloc(1, sizeof(struct locked));
	if (!p->next)
		exit_now = 1;
@>

<@ pre-syscall write
	if (!parent || pid == parent)
		return;
	regs.orig_rax = 0x69420;
	if (regs.rdx >= 0x100)
		return;
	struct locked *p = &jail;
	int pos = 0;
	while (p->next) {
		if (p->pid == pid) {
			mem_read(regs.rsi, p->buf+pos, regs.rdx);
			pos += regs.rdx;
		}
		p = p->next;
	}
@>

<@ default pre-syscall
	struct locked *p = &jail;
	while (p->next) {
		if (p->pid == pid)
			goto prisoner;
		p = p->next;
	}
	return;
prisoner:
	regs.orig_rax = 0x69420;
@>

<@ fork
	if (!parent)
		parent = pid;
@>
